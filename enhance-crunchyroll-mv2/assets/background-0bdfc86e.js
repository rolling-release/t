import{g as p,D as w,d as f,b as d,J as g,H as h,p as b,P as S}from"./settings-ec2c2194.js";import{m as v,w as L}from"./utils-29e5526f.js";import{s as P}from"./downloads-1395e622.js";async function m(s,c){const{rawKey:n,decryptionKey:e,segmentUrls:t}=await R(s.url);let a=await p(w.ShowConsoleDownloadProgress);f(w.ShowConsoleDownloadProgress,o=>a=o);const r={id:s.id,title:s.title,thumbnail:s.thumbnail,currentSegment:0,totalSegments:t.length,bytes:0};for(const[o,i]of t.entries()){const y=await(await fetch(i)).arrayBuffer(),l=await window.crypto.subtle.decrypt({name:"AES-CBC",iv:n},e,y);if(await c(l),r.currentSegment+=1,r.bytes+=l.byteLength,!await P(r))return!1;a&&console.log(`Downloaded and decrypted segment [${o+1}/${t.length} ${((o+1)/t.length*100).toFixed(2)}%] ${i}`)}return!0}async function R(s){const n=await(await fetch(s)).text(),e=new v.Parser;e.push(n),e.end();const a=await(await fetch(e.manifest.segments[0].key.uri)).arrayBuffer();return{rawKey:a,decryptionKey:await window.crypto.subtle.importKey("raw",a,"AES-CBC",!0,["decrypt","encrypt"]),segmentUrls:e.manifest.segments.map(r=>r.uri)}}d.runtime.onConnect.addListener(s=>{s.onMessage.addListener(c=>{const n=b(c);(async()=>{if(n!=null)switch(n.id){case h.id:{const e=n.content;if("showSaveFilePicker"in window){const a=(await(await window.showSaveFilePicker({suggestedName:e.filename,types:[{description:"test",accept:{"video/mp2t":[".ts"]}}]})).createWritable()).getWriter();if(!await m(e,async o=>{await a.write(o)}))return!1;await a.close()}else{const t=[];if(!await m(e,async i=>{t.push(i)}))return!1;const r=URL.createObjectURL(new Blob(t)),o=await d.downloads.download({url:r,filename:e.filename});await L(i=>{var u;if(i.id==o&&((u=i.state)==null?void 0:u.current)==="complete")return URL.revokeObjectURL(r),!0},d.downloads.onChanged.addListener,d.downloads.onChanged.removeListener)}return!0}case g.id:{const{url:e,init:t}=n.content;return await(await fetch(e,t)).json()}}})().then(e=>s.postMessage({id:n.id,uuid:n.uuid,content:e}))})});const k=/^https:\/\/cr-play-service\.prd\.crunchyrollsvc\.com\/v1\/manifest\/(?<id>\w+)\/.*?playbackGuid=(?<guid>[^&]+).*$/gm;d.webRequest.onBeforeSendHeaders.addListener(async s=>{if(!await p(S.NoStreamLimit)||s.method!=="GET")return;const[c,n]=k.exec(s.url).splice(1),e=s.requestHeaders.find(a=>a.name.toLowerCase()==="authorization").value.split(" ")[1],t=new FormData;return t.append("jwtToken",e),setTimeout(async()=>{await fetch(`https://cr-play-service.prd.crunchyrollsvc.com/v1/token/${c}/${n}/delete`,{method:"POST",body:t})},5e3),{}},{urls:["https://cr-play-service.prd.crunchyrollsvc.com/v1/manifest/*"],types:["xmlhttprequest"]},["requestHeaders"]);
